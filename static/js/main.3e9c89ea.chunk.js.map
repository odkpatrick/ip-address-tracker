{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["InputForm","props","onSubmit","handleSubmit","htmlFor","type","value","inputValue","onChange","handleChange","id","name","placeholder","AddressProp","className","addressProp","addressValue","AddressDisplay","ip","location","timezone","isp","DisplayMap","latitude","longitude","position","Map","center","zoom","zoomControl","TileLayer","attribution","url","Marker","Popup","App","state","bind","updateAddress","event","this","setState","target","address","city","region","postalCode","lat","lng","input","domain","ipAddress","test","locationRequest","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","open","send","preventDefault","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+UAMMA,G,MAAY,SAAAC,GAChB,OACE,6BACE,0BAAMC,SAAUD,EAAME,cACtB,2BAAOC,QAAQ,WAAf,6BAGA,2BACEC,KAAK,OACLC,MAAOL,EAAMM,WACbC,SAAUP,EAAMQ,aAChBC,GAAG,UACHC,KAAK,UACLC,YAAY,+BAEd,4BAAQP,KAAK,eAMbQ,EAAc,SAAAZ,GAClB,OACE,yBAAKa,UAAU,oBACb,4BAAKb,EAAMc,aACX,2BAAId,EAAMe,gBAKVC,EAAiB,SAAAhB,GACrB,OACE,yBAAKa,UAAU,6BACf,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEC,YAAY,aACZC,aAAcf,EAAMiB,GAAKjB,EAAMiB,GAAK,QAEtC,6BACA,kBAAC,EAAD,CACEH,YAAY,WACZC,aAAcf,EAAMkB,SAAWlB,EAAMkB,SAAW,QAElD,6BACA,kBAAC,EAAD,CACEJ,YAAY,WACZC,aAAcf,EAAMmB,SAAY,MAAQnB,EAAMmB,SAAY,QAE5D,6BACA,kBAAC,EAAD,CACEL,YAAY,MACZC,aAAcf,EAAMoB,IAAMpB,EAAMoB,IAAM,WAOxCC,EAAa,SAAArB,GACjB,GAAGA,EAAMsB,UAAYtB,EAAMuB,UAAW,CACpC,IAAMC,EAAW,CAACxB,EAAMsB,SAAUtB,EAAMuB,WACxC,OACE,yBAAKV,UAAU,eACb,yBAAKA,UAAU,OACb,kBAACY,EAAA,EAAD,CAAKC,OAAQF,EAAUG,KAAM,GAAIC,aAAa,GAC5C,kBAACC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAEN,kBAACC,EAAA,EAAD,CAAQR,SAAUA,GAChB,kBAACS,EAAA,EAAD,qBAOV,OACE,yBAAKpB,UAAU,OACb,gCA8HOqB,E,kDAvHb,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IACDmC,MAAQ,CACX7B,WAAY,GACZY,SAAU,KACVD,GAAI,KACJG,IAAK,KACLD,SAAU,KACVG,SAAU,KACVC,UAAW,MAGb,EAAKf,aAAe,EAAKA,aAAa4B,KAAlB,gBACpB,EAAKlC,aAAe,EAAKA,aAAakC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAdJ,E,yDAkBNE,GACXC,KAAKC,SAAS,CAAClC,WAAYgC,EAAMG,OAAOpC,U,oCAG5BqC,GACZ,IAAIxB,EAAWwB,EAAQxB,SAASyB,KAAO,KAAOD,EAAQxB,SAAS0B,OAAS,IAAMF,EAAQxB,SAAS2B,WAC7FN,KAAKC,SAAS,CACZtB,SAAUA,EACVD,GAAIyB,EAAQzB,GACZG,IAAKsB,EAAQtB,IACbD,SAAUuB,EAAQxB,SAASC,SAC3BG,SAAUoB,EAAQxB,SAAS4B,IAC3BvB,UAAWmB,EAAQxB,SAAS6B,Q,mCAIrBT,GAAQ,IAAD,OAIdU,EAAQT,KAAKJ,MAAM7B,WACvB,GAAG0C,EAAO,CAER,IAEIC,EAAQC,EAFM,0CAGHC,KAAKH,GAElBC,EAASD,EAJI,8FAMDG,KAAKH,KAEfE,EAAYF,GAKhB,IAAMI,EAAkB,IAAIC,eAE5BD,EAAgBE,mBAAqB,WAtBjB,IAAAZ,EAuBK,IAApBH,KAAKgB,YAAoC,MAAhBhB,KAAKiB,SAvBfd,EAyBF,eAAKe,KAAKC,MAAMnB,KAAKoB,eAxBvC,EAAKtB,cAAcK,KA2BnBU,EAAgBQ,KACd,MARQ,wEASCX,EAAU,WAAaA,EAAU,KAAOC,EAAa,cAAgBA,EAAa,KACzF,GACJE,EAAgBS,OAElBvB,EAAMwB,mB,+BAIN,OACE,yBAAKjD,UAAU,OACb,gCACE,wBAAIA,UAAU,SAAd,sBACA,kBAAC,EAAD,CACEX,aAAcqC,KAAKrC,aACnBI,WAAYiC,KAAKJ,MAAM7B,WACvBE,aAAc+B,KAAK/B,gBAGvB,8BACE,kBAAC,EAAD,CACES,GAAIsB,KAAKJ,MAAMlB,GACfC,SAAUqB,KAAKJ,MAAMjB,SACrBE,IAAKmB,KAAKJ,MAAMf,IAChBD,SAAUoB,KAAKJ,MAAMhB,WAEvB,kBAAC,EAAD,CACEG,SAAUiB,KAAKJ,MAAMb,SACrBC,UAAWgB,KAAKJ,MAAMZ,gB,0CAOX,IAAD,OAKV6B,EAAkB,IAAIC,eAC5BD,EAAgBE,mBAAqB,WALjB,IAAAZ,EAMK,IAApBH,KAAKgB,YAAoC,MAAhBhB,KAAKiB,SANfd,EAQF,eAAKe,KAAKC,MAAMnB,KAAKoB,eAPvC,EAAKtB,cAAcK,KAanBU,EAAgBQ,KAAK,MAFX,wEAEuB,GACjCR,EAAgBS,W,GApHJE,IAAMC,WC/EJC,QACW,cAA7BC,OAAOhD,SAASiD,UAEe,UAA7BD,OAAOhD,SAASiD,UAEhBD,OAAOhD,SAASiD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3e9c89ea.chunk.js","sourcesContent":["import React from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport './App.css';\n\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nconst InputForm = props => {\n  return (\n    <div>\n      <form onSubmit={props.handleSubmit}>\n      <label htmlFor=\"ipinput\">\n        Ip address or Domain name\n      </label>\n      <input \n        type=\"text\" \n        value={props.inputValue} \n        onChange={props.handleChange}\n        id=\"ipinput\"\n        name=\"ipinput\"\n        placeholder=\"Enter IP address or domain\"\n      />\n      <button type=\"submit\"></button>\n      </form>\n    </div>\n  );\n};\n\nconst AddressProp = props => {\n  return (\n    <div className=\"address-property\">\n      <h2>{props.addressProp}</h2>\n      <p>{props.addressValue}</p>\n    </div>\n  );\n};\n\nconst AddressDisplay = props => {\n  return (\n    <div className=\"address-display-container\">\n    <div className=\"address-display\">\n      <AddressProp \n        addressProp=\"Ip Address\"\n        addressValue={props.ip ? props.ip : \"...\"}\n      />\n      <hr></hr>\n      <AddressProp \n        addressProp=\"Location\"\n        addressValue={props.location ? props.location : \"...\"}\n      />\n      <hr></hr>\n      <AddressProp \n        addressProp=\"Timezone\"\n        addressValue={props.timezone ? (\"UTC\" + props.timezone) : \"...\"}\n      />\n      <hr></hr>\n      <AddressProp \n        addressProp=\"Isp\"\n        addressValue={props.isp ? props.isp : \"...\"}\n      />\n    </div>\n    </div>\n  );\n}\n\nconst DisplayMap = props => {\n  if(props.latitude && props.longitude) {\n    const position = [props.latitude, props.longitude];\n    return (\n      <div className=\"map-wrapper\">\n        <div className=\"map\">\n          <Map center={position} zoom={13} zoomControl={false}>\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n            />\n            <Marker position={position}>\n              <Popup>Location</Popup>\n            </Marker>\n          </Map>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"map\">\n        <div></div>\n      </div>\n    );\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n      location: null,\n      ip: null,\n      isp: null,\n      timezone: null,\n      latitude: null,\n      longitude: null,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.updateAddress = this.updateAddress.bind(this);\n\n  }\n\n  handleChange(event) {\n    this.setState({inputValue: event.target.value});\n  }\n  \n  updateAddress(address) {\n    var location = address.location.city + \", \" + address.location.region + \" \" + address.location.postalCode;\n      this.setState({\n        location: location,\n        ip: address.ip,\n        isp: address.isp,\n        timezone: address.location.timezone,\n        latitude: address.location.lat,\n        longitude: address.location.lng,\n    });\n  }\n\n  handleSubmit(event) {\n    const updateAddress = address => {\n      this.updateAddress(address);\n    };\n    var input = this.state.inputValue;\n    if(input) {\n      // test whether input is ip or domain\n      var domainRegex = /^[a-z0-9]+([-.][a-z0-9]+)*\\.[a-z]{2,}$/i;\n      var ip4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n      var domain, ipAddress;\n      if(domainRegex.test(input)) {\n        // set the domain request variable before the api fetch\n        domain = input;\n      } else {\n        if(ip4Regex.test(input)) {\n          // set the ipaddress request variable before the api call\n          ipAddress = input;\n        }\n      }\n\n      // perform APi call to get address detail\n      const locationRequest = new XMLHttpRequest();\n      var url = \"https://geo.ipify.org/api/v1?apiKey=\" + apiKey;\n      locationRequest.onreadystatechange = function() {\n        if(this.readyState === 4 && this.status === 200) {\n          // update address property of app state\n          updateAddress({...(JSON.parse(this.responseText))});\n        }\n      }\n      locationRequest.open(\n        \"GET\", \n          url + (domain ? (\"&domain=\" + domain) : \"\") + (ipAddress ? (\"&ipAddress=\" + ipAddress) : \"\"),\n          true);\n      locationRequest.send();\n    }\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1 className=\"title\">IP Address Tracker</h1>\n          <InputForm \n            handleSubmit={this.handleSubmit}\n            inputValue={this.state.inputValue}\n            handleChange={this.handleChange}\n          />\n        </header>\n        <main>\n          <AddressDisplay \n            ip={this.state.ip}\n            location={this.state.location}\n            isp={this.state.isp}\n            timezone={this.state.timezone}\n          />\n          <DisplayMap \n            latitude={this.state.latitude}\n            longitude={this.state.longitude}\n          />\n        </main>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const updateAddress = address => {\n      this.updateAddress(address);\n    };\n    // perform API  call without specifying the domain and ipaddress\n      const locationRequest = new XMLHttpRequest();\n      locationRequest.onreadystatechange = function() {\n        if(this.readyState === 4 && this.status === 200) {\n          // update address property of app state\n          updateAddress({...(JSON.parse(this.responseText))});\n        }\n      }\n\n      var url = \"https://geo.ipify.org/api/v1?apiKey=\" + apiKey;\n      \n      locationRequest.open(\"GET\", url, true);\n      locationRequest.send();\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}